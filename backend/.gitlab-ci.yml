---
variables: 
  SAST_EXCLUDED_ANALYZERS: "nodejs-scan-sast, gosec-sast"
  #gosec tests are deprecated since Gitlab 14, disabled in GitLab 15.5 already

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: "templates/ci"
    file: "DockerInDockerTemplate.yml"

stages:
  - test
  - build-image
  - test-image
  - release

.sast-analyzer:
  extends: sast
  allow_failure: true
  # `rules` must be overridden explicitly by each child job
  # see https://gitlab.com/gitlab-org/gitlab/-/issues/218444
  before_script:
   - echo -e "[url \"https://oauth2:${MY_TOKEN}@gitlab.praktikum-services.ru/\"]\n\tinsteadOf = https://gitlab.praktikum-services.ru/" | tee -a ~/.gitconfig
  script:
    - /analyzer run

gosec-test:
  stage: test
  image: securego/gosec
  allow_failure: true
  script:
    - cd backend
    - gosec ./...

sonarqube-backend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  allow_failure: true
  script:
    - cd backend
    - >
      sonar-scanner 
      -Dsonar.qualitygate.wait=true 
      -Dsonar.projectKey=${SONAR_KEY_BACK} 
      -Dsonar.sources=. 
      -Dsonar.host.url=${SONARQUBE_URL} 
      -Dsonar.login=${SONAR_LOGIN_BACK}

go-test:
  stage: test
  image: golang
  allow_failure: true
  script:
    - cd backend
    - CGO_ENABLED=0 go test -v ./...

build-image:
  stage: build-image
  cache: []
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --build-arg VERSION=$VERSION
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/momo-backend:${VERSION}"
      --cache=true

postman-test:
  stage: test-image
  cache: []
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - mkdir -p collections
    - > # загружаем коллекцию
      wget -O collections/momo-backend.postman_collection.json --header "PRIVATE-TOKEN: ${MY_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/files/postman%2Fmomo-backend.postman_collection.json/raw?ref=${CI_COMMIT_SHA}"

  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$VERSION
    - docker network create -d bridge testing
    - >
      docker run -d --name backend
      --network=testing
      $CI_REGISTRY_IMAGE/momo-backend:$VERSION
    - sleep 2
    - >
      docker run
      --network=testing
      -v ${PWD}/collections:/etc/newman
      -t postman/newman
      run momo-backend.postman_collection.json

upload-image-latest:
  variables:
    GIT_STRATEGY: none
  cache: []
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$VERSION
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/momo-backend:$VERSION $CI_REGISTRY_IMAGE/momo-backend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-backend:latest

notify:
  stage: .post
  variables:
    GIT_STRATEGY: none
  cache: []
  script:
    - > 
      curl -X POST -H "Content-Type: application/json" -d 
      "{\"chat_id\": \"-844923583\", 
      \"text\": \"CI: вышел новый бэкенд пельменной. Неплохо бы задеплоить\"}" 
      https://api.telegram.org/bot5749089203:AAFC3sgD5NjtJLP945FJ26UA211HmGJlHaQ/sendMessage
